package hydrozoa.test

import com.bloxbean.cardano.client.address.AddressProvider
import com.bloxbean.cardano.client.api.model.Amount
import com.bloxbean.cardano.client.backend.blockfrost.service.BFBackendService
import com.bloxbean.cardano.client.function.helper.SignerProviders
import com.bloxbean.cardano.client.plutus.spec.PlutusData
import com.bloxbean.cardano.client.quicktx.{ScriptTx, Tx}
import com.typesafe.scalalogging.Logger
import hydrozoa.infra.{mkBuilder, toBB, toEither}
import hydrozoa.l1.rulebased.onchain.UnliftMinimialValidatorScript
import hydrozoa.networkL1static
import hydrozoa.node.TestPeer
import hydrozoa.node.TestPeer.*
import munit.FunSuite
import ox.resilience.{RetryConfig, retryEither}
import sttp.client4.Response
import sttp.client4.quick.*

import scala.concurrent.duration.{Duration, DurationInt}

/* Steps to reproduce:

1. Run Yaci
2. Run this suite
3. The error won't be in the log, please run the following command to see the error
(you can copy the spend tx cbor from suite's output and/or
use Yaci API at http://localhost:8080/swagger-ui/index.html#/Tx%20Submission%20Service/submitTx_1):

NB: Note `[delete it]` due to the comment syntax, please remove them.

curl -X 'POST' \
  'http://localhost:8080/api/v1/tx/submit' \
  -H 'accept: *[delete it]/[delete it]*' \
  -H 'Content-Type: text/plain' \
  -d '84a700d90102818258200eaaea527c23b85d370aec49fda6737845db5b2525069b36d4dac8dc3b0410b700018182583900ca6e1b1f320d543a24adeabc0aa4627635c7349b639f86f74bdfdd78d31b28c9619a58b3792a7394ab85deb36889c4d7b0632c8167b855d21a027af9dd021a0005e4a30b5820608b6b6c94de9e48e557555bb88277aba8ab0506a0e6f0866b137c1ceb660c120dd9010281825820aae852d5d2b08c0a937a319fec0d9933bc3bc67b9d0a6bfd4001997b169364b3001082583900ca6e1b1f320d543a24adeabc0aa4627635c7349b639f86f74bdfdd78d31b28c9619a58b3792a7394ab85deb36889c4d7b0632c8167b855d21b0000000254030d0b111a0008d6f5a300d90102818258209c811f4c1b392a973f0ee4dee6ca76077113b0a5e6925a285d40220464f027b95840f5a8e01bab6008cfb5ad8c1266c212626e5cdb970afd6e4ffcef8e9632d4a150f75939f844cdc50d8fa2bd5abe0d5d830b8e2e9e52f62fbe6280227270ceab0a05a182000082d87980821a0004c8671a1baf03a907d9010281590df0590ded0101003232323232323232323232323232323232323232323232323232323232323232323232323232323223002001232333333300122200123330093002222002001300222200322333300900130032220023003222003002233300730022220020013002222003223330073003222002001300322200323330053002222002001300222200322330050013003222003300800122533573892117456d7074792056616c696461746f722e70726f706f736500162225335738920114456d7074792056616c696461746f722e766f746500162225335738920117456d7074792056616c696461746f722e6365727469667900162225335738920116456d7074792056616c696461746f722e7265776172640016222232323232498cde2001000991bc3001488160b0f15b32629d02514af939e5b660d27a4db9f84cde5eecfef7db87c056163a9f21925653519cf9972f4b6c115e195baf1439203af99d121fce39ec8eed3fa72a0a31dd537642ab7cb1da52dfbacab1a032c5579aa702a59f1991e9aefae1d9c5003237780029113097f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb00335738920111547265617375727956616c696461746f72004988894cd5ce248114456d7074792056616c696461746f722e6d696e7400162323332222333001004003002300435742002602e6ae84d5d100098019aba1357446ae88004d55cf1baa00123232325333573466e1c00920001322222223006007375c6ae8400454ccd5cd19b87002480084cc88888888cc01402001cc080d5d08009980e80c1aba1357440022a666ae68cdc380124008264444444600800e603c6ae8400454ccd5cd19b87002480184cc88888888cc00c02001cdd69aba10013012357426ae8800454ccd5cd19b87002480204c8888888c00801cc034d5d08008a999ab9a3370e004900509991111111198008040039bad3574200260106ae84d5d10008a99ab9c49010b496e76616c696420746167001635573c0046aae74004dd500091919999999999999999111111111111111119999999999999998008088080078070068060058050048040038030028020018011980f8091aba10013301f012357426ae88004cc07c04cd5d09aba2357440026eb4d5d09aba2357446ae88004ccc059d71980b3ae75a6ae84d5d11aba2357446ae88004cc07c03cd5d09aba2357446ae88d5d11aba200133301601b75a6ae84d5d11aba2357446ae88d5d11aba2001300b357426ae88d5d11aba2357446ae88d5d11aba20013301f01c357426ae88d5d11aba2357446ae88d5d11aba23574400266602c00802a6ae84d5d11aba2357446ae88d5d11aba2357446ae88d5d100099980b3ae015357426ae88d5d11aba2357446ae88d5d11aba2357446ae88d5d1000980f1aba1357446ae88d5d11aba2357446ae88d5d11aba2357446ae88d5d100099980b0051980b0048019aba1357446ae88d5d11aba2357446ae88d5d11aba2357446ae88d5d11aba20013301f005357426ae88d5d11aba2357446ae88d5d11aba2357446ae88d5d11aba2357446ae88004cc069d69aba1357446ae88d5d11aba2357446ae88d5d11aba2357446ae88d5d11aba2357446ae88004cc069d69aba1357446ae88d5d11aba2357446ae88d5d11aba2357446ae88d5d11aba2357446ae88d5d10009aab9e37540024646464a666ae68cdc3801240002444a0062a666ae68cdc3801240042444a0042a666ae68cdc3801240082444a0022a66ae712410b496e76616c696420746167001635573c0046aae74004dd500091919192999ab9a3370e004900009911111118030039bae357420022a666ae68cdc380124004264444444600a00e603a6ae8400454ccd5cd19b87002480104c8888888c01001cc06cd5d08008a999ab9a3370e004900309991111111198018040039bad35742002601e6ae84d5d10008a999ab9a3370e0049004099111111180100398051aba100115333573466e1c009200a1332222222233001008007375a6ae84004c014d5d09aba2001153357389210b496e76616c696420746167001635573c0046aae74004dd500091919991111998008020018011bad3574200260306ae84d5d100098019aba1357446ae88004d55cf1baa00123232325333573466e1c00920001333222222222233300700a009008330180073574200260266ae84d5d10009980c3ae357426ae88d5d10008a999ab9a3370e0049001099911111111198030048041980c0039aba10013006357426ae8800454ccd5cd19b87002480104cc888888888cc014024020ccc050065d69aba10013301875c6ae84d5d10008a999ab9a3370e0049003099111111118020041980c0039aba100115333573466e1c00920081333322222222222333300300b00a00900833018007357420026603a0326ae84d5d100099980a00cbad357426ae88d5d100098029aba1357446ae88d5d10008a999ab9a3370e0049005099911111111198010048041980c0039aba10013301875c6ae84d5d10008a999ab9a3370e00490060911111128008a99ab9c49010b496e76616c696420746167001635573c0046aae74004dd500091919911198008018011bad357420026eb4d5d09aba200135573c6ea80048c8cc888cc00400c008dd69aba1001375a6ae84d5d10009aab9e37540024646644466002006004602e6ae84004dd69aba1357440026aae78dd500091919192999ab9a3370e00490000991111801802180a9aba100115333573466e1c009200213222230020043015357420022a666ae68cdc3801240082644446002008602c6ae8400454cd5ce2490b496e76616c696420746167001635573c0046aae74004dd5000919199111980080180118019aba10013003357426ae88004d55cf1baa001232332223300100300230043574200260066ae84d5d10009aab9e3754002464a666ae68cdc3800a4000294054ccd5cd19b87001480085288a99ab9c4910d4e6f74206120626f6f6c65616e001635573a6ea80048c8c8c94ccd5cd19b87002480004889400c54ccd5cd19b87002480084c8888c008010dd69aba100115333573466e1c0092004122250011533573892010b496e76616c696420746167001635573c0046aae74004dd500091919192999ab9a3370e004900009991111111111111980580680618081aba10013300f75a6ae84d5d10008a999ab9a3370e004900109991111111111111980500680618081aba10013300f75a6ae84d5d10008a999ab9a3370e004900209991111111111111980480680618081aba10013005357426ae8800454ccd5cd19b87002480184ccc88888888888888ccc020038034030c040d5d080098029aba1357440026eb4d5d09aba2357440022a666ae68cdc38012401026644444444444446600e01a01860206ae84004dd69aba1357440022a666ae68cdc38012401426444444444444600c01860206ae8400454ccd5cd19b87002480304cc8888888888888cc014034030c040d5d08009bad357426ae8800454ccd5cd19b87002480384cc8888888888888cc010034030c044d5d080098089aba1357440022a666ae68cdc38012402026644444444444446600601a01860226ae84004dd69aba1357440022a666ae68cdc38012402426644444444444446600401a01860206ae84004c040d5d09aba200115333573466e1c009201413222222222222300100c3010357420022a66ae7124010b496e76616c696420746167001635573c0046aae74004dd500091919192999ab9a3370e0049000099111180180218081aba100115333573466e1c009200213222230020043005357420022a666ae68cdc380124008266444446600200a00860206ae84004c014d5d09aba20011533573892010b496e76616c696420746167001635573c0046aae74004dd500091919192999ab9a3370e0049000099111180180218071aba100115333573466e1c00920021222500215333573466e1c0092004122250011533573892010b496e76616c696420746167001635573c0046aae74004dd5000919199111980080180118069aba10013003357426ae88004d55cf1baa001232333322222333300100500400300230073574200266600aeb8cc015d73ad357426ae88004c00cd5d09aba23574400266012eb8d5d09aba2357446ae88004d55cf1baa00123232325333573466e1c00920001222500315333573466e1c00920021322223002004375c6ae8400454ccd5cd19b87002480104c8888c004010c014d5d08008a99ab9c49010b496e76616c696420746167001635573c0046aae74004dd5000900091119180298009bab002300d22533357346ae8c00448940084c8cc8888cc00401000ccc888cc00400c008c018d55ce80098029aab9e0013003357440046ae840048c88c0040080048c8cc888cc00400c008c014d5d0800998020019aba1357440026aae78dd500091919192999ab9a3370e004900009911180100198031aba100115333573466e1c0092002133322222333001005004003375a6ae84004dd69aba1357440026eb4d5d09aba2357440022a66ae7124010b496e76616c696420746167001635573c0046aae74004dd500091192999ab9a3370e6aae7400520001322230020033003357426aae780044894004dd500091919192999ab9a3370e004900009911180100198029aba100115333573466e1c0092002132223001003375c6ae8400454cd5ce24810b496e76616c696420746167001635573c0046aae74004dd5000919118008011bae00123233222330010030023003357420026eb4d5d09aba200135573c6ea80048c88c004008dd7000911918009bac002300322533357346ae8c00448940084cc8888cc00401000cc010d5d080098011aba200123230022330020020012300223300200200101f5f6'


 */

class UnliftMinimalSuite extends FunSuite {

    override val munitTimeout = Duration(1, "m")

    val yaciBFApiUri: String = "http://localhost:8080/api/v1/"

    val backendService = BFBackendService(yaciBFApiUri, "")

    private val log = Logger(getClass)

    override def beforeEach(context: BeforeEach): Unit =

        log.info("Resetting Yaci...")
        val _: Response[String] = quickRequest
            .post(uri"http://localhost:10000/local-cluster/api/admin/devnet/reset")
            .send()

    override def afterEach(context: AfterEach): Unit = ()

    test("Minimal unlift error example") {

        // 1. Lock some funds
        val bob = account(Bob)
        val bobAddress = bob.baseAddress()

        val lockTx = Tx()
            .from(bobAddress)
            .payToAddress(
              AddressProvider
                  .getEntAddress(
                    UnliftMinimialValidatorScript.plutusScript,
                    networkL1static.toBB
                  )
                  .toBech32,
              Amount.ada(42)
            )

        val lockTxFinal = mkBuilder
            .apply(backendService)
            .apply(lockTx)
            .feePayer(bobAddress)
            .withSigner(SignerProviders.signerFrom(bob))
            .buildAndSign()

        log.info(s"lock tx: ${lockTxFinal.serializeToHex()}")

        val lockRet =
            backendService.getTransactionService.submitTransaction(lockTxFinal.serialize())

        log.info(s"lockRet: $lockRet")

        val Right(lockTxId) = lockRet.toEither

        // 2. Try to spend it

        retryEither(RetryConfig.delayForever(1.seconds))(
          backendService.getTransactionService.getTransaction(lockTxId).toEither
        )

        val carol = account(Carol)
        val carolAddress = carol.baseAddress()

        val Right(spendingUtxo) = backendService.getUtxoService.getTxOutput(lockTxId, 0).toEither

        val spendTx = ScriptTx()
            .collectFrom(spendingUtxo, PlutusData.unit())
            .payToAddress(carolAddress, Amount.ada(42))
            .attachSpendingValidator(UnliftMinimialValidatorScript.plutusScript)

        val spendTxFinal = mkBuilder
            .apply(backendService)
            .apply(spendTx)
            .feePayer(carolAddress)
            .collateralPayer(carolAddress)
            .withSigner(SignerProviders.signerFrom(carol))
            .buildAndSign()

        log.info(s"spend tx: ${spendTxFinal.serializeToHex()}")

        val spendRet =
            backendService.getTransactionService.submitTransaction(spendTxFinal.serialize())

        log.info(s"spendRet: $spendRet")

        assert(spendRet.isSuccessful)

    }
}
