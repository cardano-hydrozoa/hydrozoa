package hydrozoa.l1.rulebased.tx.vote

import com.bloxbean.cardano.client.account.Account
import com.bloxbean.cardano.client.backend.api.BackendService
import com.bloxbean.cardano.client.plutus.spec.PlutusData
import hydrozoa.infra.TxBuilder
import hydrozoa.infra.transitionary.{bloxToScalusUtxoQuery, toBB, toScalus}
import hydrozoa.l1.rulebased.onchain.DisputeResolutionScript
import hydrozoa.l1.rulebased.onchain.DisputeResolutionValidator.VoteStatus.Vote
import hydrozoa.l1.rulebased.onchain.DisputeResolutionValidator.{BlockHeader, *}
import hydrozoa.{AddressBechL1, Ed25519Signature, TxL1, UtxoIdL1}
import scalus.builtin.ByteString
import scalus.builtin.Data.{fromData, toData}
import scalus.cardano.address.Address
import scalus.cardano.ledger.*
import scalus.cardano.ledger.DatumOption.Inline
import scalus.cardano.ledger.Era.Conway
import scalus.cardano.ledger.Language.PlutusV3
import scalus.cardano.ledger.RedeemerTag.Spend
import scalus.cardano.ledger.TransactionOutput.Babbage
import scalus.cardano.ledger.utils.MinTransactionFee
import scalus.ledger.babbage.ProtocolParams
import scalus.prelude.List.asScalus
import scalus.uplc.eval.{ExBudget, ExCPU, ExMemory, PlutusVM}
import scalus.bloxbean.{EvaluatorMode, SlotConfig, TxEvaluator}

import scala.math.Fractional.Implicits.infixFractionalOps
import scala.math.Integral.Implicits.infixIntegralOps
import scala.math.Numeric.Implicits.infixNumericOps
import scala.collection.immutable.TreeSet
import scala.collection.mutable
import scala.util.control.TailCalls
import scala.util.control.TailCalls.{done, tailcall}

// TODO: Some parts of this can most probably be factored out into their own Tx Builders. This includes:
// - Setting collteral
//   - recipe: includes protocol params, or at least part that sets collateral fee percentage?
//   - query: fetch collateralUtxo;
//   - calc: check that utxo is ADA only and extract total collateral;
//   - initializer: set collateral utxo and total collateral)
//   - finalizer: id or user-supplied callback?
// - Calculating fees
class VoteTxBuilder(backendService: BackendService, recipe: VoteTxRecipe) extends TxBuilder {
    override type Recipe = VoteTxRecipe

    override type QueryError = String
    override type QueryResult = VoteQueryResult
    override def query(recipe: Recipe): Either[QueryError, QueryResult] = {
        for
            inVoteUtxo <- bloxToScalusUtxoQuery(backendService, recipe.voteUtxoId)
            collateralUtxo <- bloxToScalusUtxoQuery(backendService, recipe.collateralUtxoId)
        yield VoteQueryResult(inVoteUtxo = inVoteUtxo, collateralUtxo = collateralUtxo)

    }
    // Cache the result
    // (Note, Peter 2025-07-16: Alex suggested just using exceptions and making things mutable, so I'll just
    // use the exception here)
    private val Right(queryResult) = query(recipe)

    override type CalculationError = String
    override type CalculationResult = VoteCalculationResult
    override def calculate(
        queryResult: VoteQueryResult
    ): Either[CalculationError, CalculationResult] = {
        ////////////////////////////////
        // Collateral
        val totalCollateral: Coin =
            if queryResult.collateralUtxo.value.assets == Map.empty
            then queryResult.collateralUtxo.value.coin
            else return Left("Collateral UTxO can only contain ADA.")

        ////////////////////////////////
        // Out Vote
        val inVoteUtxoBabbage: Babbage = queryResult.inVoteUtxo match {
            case v: Babbage => v
            case _          => return Left("Vote Utxo is not babbage")
        }
        val inVoteDatum: VoteDatum = inVoteUtxoBabbage.datumOption match {
            case Some(Inline(i)) => fromData(i)
            case _               => return Left("voteUtxo does not have inline datum")
        }
        val outVoteDatum: VoteDatum =
            inVoteDatum
                .copy(voteStatus =
                    Vote(
                      VoteDetails(recipe.blockHeader.utxosActive, recipe.blockHeader.versionMinor)
                    )
                )

        val multisig =
            recipe.proof
                .map(s => ByteString.fromArray(IArray.genericWrapArray(s.signature).toArray))
                .toList
                .asScalus
        val voteRedeemer = DisputeRedeemer.Vote(MinorBlockL1Effect(recipe.blockHeader, multisig))

        // NEEDS REVIEW: Double check this.
        val voteSigner: AddrKeyHash = Hash(
          ByteString.fromArray(recipe.nodeAccount.publicKeyBytes())
        )

        Right(
          VoteCalculationResult(
            outVoteAddress = inVoteUtxoBabbage.address,
            outVoteDatum = outVoteDatum,
            outVoteRedeemer = voteRedeemer,
            voteSigner = voteSigner
          )
        )
    }

    override type InitializerResult = Transaction

    // In the initializer, we cannot compute the following fields of the  TxBody:
    // - Outputs, because do not know the fee, and thus do not know the final value of the vote UTxO
    // - Fee (?)
    // - totalCollateral, because we do not know the fee
    // - collateral return output, because we do not know the total collateral
    // - ScriptDataHash, because we don't know the Exunits that should be allocate to the
    //       dispute script (unless we over-estimate)
    //
    // Additionally, in the Witness Set, we cannot know the redeemers for the same reason as the ScriptDataHash
    override def txInitializer(
        calculationResult: CalculationResult,
        entryTx: Transaction
    ): Either[InitializationErrorType, InitializerResult] = {
        val witnessSet = TransactionWitnessSet(
          // NEEDS REVIEW: There's "cbor encoded", "double cbor encoded", and "flat encoded"
          // I don't know which I need. I think maybe these should be made into opaque newtypes?
          plutusV3Scripts = Set(
            Script.PlutusV3(ByteString.fromArray(DisputeResolutionScript.script.flatEncoded))
          ),
          // This redeemer is a dummy redeemer. It cannot be properly constructed until we
          // know the exunits, but we need it  in order to run the script to calculate the ex-units
          redeemers = Some(
            KeepRaw(
              Redeemers.from(
                Seq(
                  Redeemer(
                    tag = Spend,
                    index = 0,
                    data = calculationResult.outVoteRedeemer.toData,
                    exUnits = ExUnits(memory = 0, steps = 0)
                  )
                )
              )
            )
          )
        )

        Right(
          Transaction(
            body = KeepRaw(
              entryTx.body.value.copy(
                inputs = Set(recipe.voteUtxoId.toScalus),
                // This is a dummy output; the value cannot be known until after we know the fee.
                // But we need this here dummy output in order to calculate the script context and
                // run the script to calculate exunits.
                outputs = IndexedSeq(
                  Sized(
                    TransactionOutput(
                      address = calculationResult.outVoteAddress,
                      value = queryResult.inVoteUtxo.value,
                      datumOption = Some(Inline(calculationResult.outVoteDatum.toData))
                    )
                  )
                ),
                ttl = Some(1024),
                collateralInputs = Set(recipe.collateralUtxoId.toScalus),
                requiredSigners = Set(calculationResult.voteSigner),
                referenceInputs = Set(recipe.treasuryUtxoId.toScalus)
              )
            ),
            witnessSet = witnessSet,
            isValid = true,
            auxiliaryData = None
          )
        )
    }

    override type FinalizerResult = Transaction
    // The current approach here is to try to find a fixed point, but there's no guarantee that this will converge.
    // A binary search may be better, or timing after a number of iterations.
    override def txFinalizer(
        cr: VoteCalculationResult,
        initRes: InitializerResult
    ): TailCalls.TailRec[Either[FinalizerError, FinalizerResult]] = {
        ///////////////////////
        // First thing we need to do is evaluate the transaction in order to find ex-units, so we can compute the
        // fee. In order to do costing, we need the cost models.

        val costModels = ScriptDataHashGenerator.getUsedCostModels(
          pparams = recipe.protocolParams,
          // WARN: we use the init witness because we need the cost model in order to
          // evaluate the script for ex-unit calculations, which in turn affects the redeemer in the cost
          // model. This seems like it might throw off convergence? But then again, this is the transaction
          // we are going to evaluate...
          w = initRes.witnessSet,
          refLangs = TreeSet(PlutusV3)
        )

        // Now comes the thorny part. We don't have a TxEvaluator in scalus yet as far as I can tell, so 
        // we have to end up casting a lot of things back to bloxbean.
        val evaluator = TxEvaluator(
          slotConfig = SlotConfig.Preview,
          initialBudget = ExBudget(cpu = ExCPU(999_999_999), memory = ExMemory(999_999_999)),
          protocolMajorVersion = recipe.protocolParams.protocolVersion.major,
          costMdls = costModels.toBB,
          mode = EvaluatorMode.EVALUATE_AND_COMPUTE_COST,
          debugDumpFilesForTesting = false
        )

        val voteTxRes = evaluator.evaluateTx(
          initRes.toBB,
          inputUtxos = Map(recipe.voteUtxoId.toBB -> queryResult.inVoteUtxo)
        )

        ////////////
        // Then we compute the fee. This, in part, digs into the redeemer map to see what the allocated exunits
        // are for each redeemer

        // N.B.: Will throw if we're missing scripts, I think. But for this
        // transaction, we provide the dispute script directly, so I don't
        // think we will miss any.
        val Right(minFee) =
            MinTransactionFee(
              transaction = initRes,
              utxo = Map.empty,
              protocolParams = recipe.protocolParams
            )

        ///////////////
        // Then we use that to compute how much collateral we need. This is a percentage of the fee

        // We must have:
        // collateral * 100 > fee * collateralPercentge
        val collateralCoin: Coin = Coin(
          (minFee.value.toDouble * recipe.protocolParams.collateralPercentage.toDouble / 100).ceil.toLong
        )
        assert(collateralCoin.value > 0, "Collateral must be > 0")

        ///////////////
        // Then we compute the collateral return output by removing the needed collateral from the
        // collateral input

        // No .copy() here?
        val collateralReturnOutput: TransactionOutput = TransactionOutput(
          address = queryResult.collateralUtxo.address,
          value = queryResult.collateralUtxo.value - Value(collateralCoin)
        )

        val redeemers: Some[KeepRaw[Redeemers]] = Some(
          KeepRaw(
            Redeemers.from(
              Seq(
                Redeemer(
                  tag = Spend,
                  index = 0,
                  data = cr.outVoteRedeemer.toData,
                  exUnits = disputeScriptExUnits
                )
              )
            )
          )
        )

        val witnessSet: TransactionWitnessSet = initRes.witnessSet.copy(redeemers = redeemers)

        val scriptDataHash =
            ScriptDataHashGenerator.computeScriptDataHash(
              era = Conway,
              // This will get set in the finalizer, we don't know it yet because we don't know the exunits
              redeemers = redeemers,
              datums = KeepRaw(
                TaggedSet(Set(cr.outVoteDatum.toData).map(KeepRaw(_)))
              ),
              costModels = costModels
            )

        ////////////////////////////////
        // Now we have enough to construct a new transaction with updated outputs, fees,
        // collateral stuff, witness set, and data hash.
        // Our hope is that this process converges to something stable.

        val nextRes: Transaction =
            initRes.copy(
              body = KeepRaw(
                initRes.body.value.copy(
                  outputs = IndexedSeq(
                    Sized(
                      TransactionOutput(
                        address = cr.outVoteAddress,
                        value = queryResult.inVoteUtxo.value - Value(minFee),
                        datumOption = Some(Inline(cr.outVoteDatum.toData))
                      )
                    )
                  ),
                  // FIXME: computeScriptDataHash looks like it produces a DataHash, not a ScriptDataHash, so we have
                  // to do an additional wrapping here
                  scriptDataHash = Some(Hash(scriptDataHash)),
                  fee = minFee,
                  totalCollateral = Some(collateralCoin),
                  collateralReturnOutput = Some(Sized(collateralReturnOutput))
                )
              ),
              witnessSet = witnessSet
            )

        ////////////////////////
        // If the new transaction matches the old one, then we've converged to a fixed point and we can return.
        // If it doesn't, we need to perform a recursive call and try to step closer to convergence.
        if initRes == nextRes then done(Right(nextRes)) else tailcall(txFinalizer(cr, nextRes))
    }
}

case class VoteTxRecipe(
    voteUtxoId: UtxoIdL1,
    treasuryUtxoId: UtxoIdL1,
    blockHeader: BlockHeader,
    proof: Seq[Ed25519Signature],
    // address for collateral (and fees for now)
    nodeAddress: AddressBechL1,
    // TODO:Account is used to build and submit in the builder,
    //   though likely we want to separate these two phases.
    nodeAccount: Account,
    collateralUtxoId: UtxoIdL1,
    protocolParams: ProtocolParams
)

case class VoteCalculationResult(
    outVoteDatum: VoteDatum,
    outVoteAddress: Address,
    outVoteRedeemer: DisputeRedeemer,
    voteSigner: AddrKeyHash
)

case class VoteQueryResult(inVoteUtxo: TransactionOutput, collateralUtxo: TransactionOutput)

/*
    [
    {
        inputs (collateral and vote utxo?)
        0: 258_1([
            [
                h'85ddba97b0d5a0827e6737f6359a37428a42ea68d8dd6e2d9d746303db0ca62d',
                3,
            ],
            [
                h'be85ae49c1c862cf6e560dceac53f79549bf40954215394169679030bae856d0',
                0,
            ],
        ]),

        outputs
        1: [

            new treasury
            {
                0: h'70dda5ba8687a73ff85f246b63363913df1b10b43412b163519dfa1744',
                1: [
                    4000000_2,
                    {
                        h'874bfae36ec944b5444f02055df3c7719be9459679986ef8e4b87b41': {
                            h'00d950b0d1b3bc33c6ca939f1131adbc769d8cbae1eff6e2e3d92ef5b4d0442b': 1,
                        },
                    },
                ],
                2: [
                    1,
                    24_0(<<121_0([_
                        2,
                        3,
                        121_0([_
                            h'4048ff89ca4f88e66598e620aa0c7128c2145d9a181ae9a4a81ca8e3',
                        ]),
                        122_0([_
                            121_0([_
                                (_
                                    h'ae7d00519124863ccc22ef15cdb498dd574a7d3acfd700ae799c554b77d6c439e6dd8846f0b45fcfdf6e91240bd72f5411cfb4c95bf540b47bb920b483a51c44',
                                    h'4ee05b8a5708485be6de4aa8140f585f526e25eda6c610b38da7a076c491f436',
                                ),
                                2,
                            ]),
                        ]),
                    ])>>),
                ],
            },

            changeutxo
            [
                h'604048ff89ca4f88e66598e620aa0c7128c2145d9a181ae9a4a81ca8e3',
                29244399_2,
            ],
        ],

        fee
        2: 755601_2,

        ttl
        3: 1024_1,

        script data hash
        11: h'0759ab084d206e0fd92222d27b0b86f93ea500d964ed730f5862e9ebe112a74f',

        Collateral inputs
        13: 258_1([
            [
                h'be85ae49c1c862cf6e560dceac53f79549bf40954215394169679030bae856d0',
                0,
            ],
        ]),

        Required signers
        14: 258_1([
            h'4048ff89ca4f88e66598e620aa0c7128c2145d9a181ae9a4a81ca8e3',
        ]),

        Collateral return output
        16: [
            h'604048ff89ca4f88e66598e620aa0c7128c2145d9a181ae9a4a81ca8e3',
            28866598_2,
        ],

        total collateral
        17: 1133402_2,

        reference inputs (treasury Utxo Ref input)
        18: 258_1([
            [
                h'85ddba97b0d5a0827e6737f6359a37428a42ea68d8dd6e2d9d746303db0ca62d',
                0,
            ],
        ]),
    },
    {
        vkey (voter)
        0: 258_1([
            [
                h'2edaddc3c4b97521d40fb9464074c079ba0f0968c718c4d2132d94ea96dbaa48',
                h'87b0e847213d46731f26662af9784659de76625fc3066d330cd66a424c93d52c4d94734990202771497e4c34c34f9b5b9ed17f7ec5b3a0b12c1fbd994238600a',
            ],
        ]),

        Redeemers
        5: {
            [0, 0]: [
                121_0([_
                    121_0([_
                        121_0([_
                            3,
                            121_0([]),
                            1752679532_2,
                            1,
                            2,
                            (_
                                h'ae7d00519124863ccc22ef15cdb498dd574a7d3acfd700ae799c554b77d6c439e6dd8846f0b45fcfdf6e91240bd72f5411cfb4c95bf540b47bb920b483a51c44',
                                h'4ee05b8a5708485be6de4aa8140f585f526e25eda6c610b38da7a076c491f436',
                            ),
                        ]),
                        [_
                            h'93594578273c75c2edda16a4b3591add16c8cc3cf7334b0748d05032dc24a49cc765d7e0bc7f94f177e496f7d93823cf608794b1c605d14832e66de2382fa005',
                            h'1d8a72196a45a95d67280eb60ce0ae8665d23aba6daa686072149661c4d9cd0e097594221c25743f273850fb8775b493c54a7ced8c0c8bd6a4f51c6ef8664f0d',
                            h'd914f23d322befe42d9d3f22aa36bb7d356d08cfb031ba6ac5f0eaf8e3f0eb9f90dd9a23e910a69e42da9bf5fa1cd8140f84e28b317e381bbd36877e2adedb03',
                            h'1d013d7295584dc2cd1daa45239b66741102e2786222cae6c2b5f5ecf6d2d75e310ccaa7798b2fd48b353292838c409c757a586979c1cb3d0f71b4f64555b606',
                        ],
                    ]),
                ]),
                [970409_2, 450858232_2],
            ],
        },

        Scripts (dispute script)
        7: 258_1([
            h'5928ac010100323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232230020012323333333001222001233303e3002222002001300222200322333300900130032220023003222003002233300730022220020013002222003223330073003222002001300322200323330053002222002001300222200322330050013003222003303d00122533573892117456d7074792056616c696461746f722e70726f706f736500162225335738920114456d7074792056616c696461746f722e766f746500162225335738920117456d7074792056616c696461746f722e6365727469667900162225335738920116456d7074792056616c696461746f722e726577617264001622223232333303400523232323232323232323232323232323232323232323232323253335734646466e1c008004c014888800cc06c888800c526153357389212f6f74686572206669656c6473206f6620766f74654f7574707574206d757374206d6174636820766f7465496e70757400165333573466606008460344444004600644440042930a99ab9c49012f6f74686572206669656c6473206f6620766f74654f7574707574206d757374206d6174636820766f7465496e707574001653335734646466e1c008004c00c8888010c06488880105261533573892012f6f74686572206669656c6473206f6620766f74654f7574707574206d757374206d6174636820766f7465496e707574001633300122220011533573892135766f7465537461747573206669656c64206f6620766f74654f7574707574206d757374206265206120636f727265637420566f746500162325333573466e3cc00888008cc064880088888880045261533573892135766f7465537461747573206669656c64206f6620766f74654f7574707574206d757374206265206120636f727265637420566f746500165333573466e1cc00488004cc0608800888888800852615335738920135766f7465537461747573206669656c64206f6620766f74654f7574707574206d757374206265206120636f727265637420566f746500163303900204f533357346605460024444008602044440082930a99ab9c4914954686572652073686f756c64206578697374206f6e6520636f6e74696e75696e6720766f7465206f75747075742077697468207468652073616d6520736574206f6620746f6b656e73001633330403018222222222222222200e2333302e3001222200300e00d00c20011533573892014954686572652073686f756c64206578697374206f6e6520636f6e74696e75696e6720766f7465206f75747075742077697468207468652073616d6520736574206f6620746f6b656e7300165333573466e1ccc04c8800888888800cc01c888888800852615335738921435468652076657273696f6e4d616a6f72206669656c64206d757374206d61746368206265747765656e20747265617375727920616e6420766f746552656465656d6572001633302c300622222220053012220012253335734666e54008010004526153357389214052656465656d65722073686f756c6420636f6e7461696e20616c6c2076616c6964207369676e61747572657320666f722074686520626c6f636b20766f74656400165333573466e1cc0b0c0148888888014c0b0c04488004526153357389214052656465656d65722073686f756c6420636f6e7461696e20616c6c2076616c6964207369676e61747572657320666f722074686520626c6f636b20766f7465640016323766002605a602044004666666026444444444444444401244002440042a66ae71240147546865207472616e73616374696f6e2076616c696469747920757070657220626f756e64206d757374206e6f74206578636565642074686520646561646c696e65566f74696e67001625333573466e24004c010888888800c52615335738920147546865207472616e73616374696f6e2076616c696469747920757070657220626f756e64206d757374206e6f74206578636565642074686520646561646c696e65566f74696e67001615335738920147546865207472616e73616374696f6e2076616c696469747920757070657220626f756e64206d757374206e6f74206578636565642074686520646561646c696e65566f74696e670016533357346466e3c00401cc008888888801852615335738920121547265617375727920646174756d20646973707574654964206d69736d617463680016533357346466e3c00401cc004888888801c5261533573892011e547265617375727920646174756d20686561644d70206d69736d617463680016333302f30022200102b20012533573892119547265617375727920646174756d206973206d697373696e6700163333303233303133001220012222003004223371e00400260609310008a99ab9c4912454726561737572792073686f756c6420636f6e7461696e20626561636f6e20746f6b656e00162230022253335734a666ae68c0fc00c4cdc799199b8c4800000400d200830334985280a4c2a66ae712412454726561737572792073686f756c6420636f6e7461696e20626561636f6e20746f6b656e001633300e222222222222222200f15335738921294f6e6c79206f6e652072656620696e70757420287472656173757279292069732072657175697265640016223200353335734a666ae68c0f00044cc0f4cc0088800888008cc02888008880085280a4c2a66ae71241294f6e6c79206f6e652072656620696e707574202874726561737572792920697320726571756972656400163003222001300222200230012220033302e3001222200322233322223330010040030020030020013003220015333573466062600a4444004466605e6012444444444444444401000205c2930a99ab9c4901225472616e73616374696f6e206d757374206265207369676e65642062792070656572001653335734660626008444400244a0042930a99ab9c4911d566f746520697320616c726561647920686173206265656e206361737400163333034300622222222222222220102330343300122002220023006220021533573892010c4f6e636861696e4572726f72001622320035333573460680022930a99ab9c4911f4f6e6c79206f6e6520766f7465207574786f2063616e206265207370656e740016335738920104566f7465004988c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c94ccd5cd199818821980211110011128008a4c2a66ae7124110526571756972656d656e744572726f72001653335734646466e1c008004c0288888010c00c88880105261533573892013c4b6579206669656c64206f6620636f6e74696e75696e67496e70757420616e6420636f6e74696e75696e674f7574707574206d757374206d6174636800165333573466e1cc008888800cc01c888800c5261533573892013e546865206c696e6b206669656c64206f662072656d6f766564496e70757420616e6420636f6e74696e75696e674f7574707574206d757374206d617463680016533357346608a600244440026603c600e4444002600c44440022930a99ab9c490132636f6e74696e75696e674f7574707574206d757374206d6174636820746865206869676865737420766f746553746174757300163303900104f323300120011533573892013b54686520636f6e74696e75696e67206f757470757420776173206e6f7420666f756e64206f7220636f6e7461696e732077726f6e672076616c75650016330413019222222222222222200e2533357346605660024444008602044440082666604a4466e3c008004cc09488cdc78010009119b87002001300122220033301e30102222003300e222200314a0a666ae694ccd5cd19821180211110009128010a511330423003222200122500213232323233333301c2222222222222222009220012200215335738920147546865207472616e73616374696f6e2076616c696469747920757070657220626f756e64206d757374206e6f74206578636565642074686520646561646c696e65566f74696e67001625333573466e24004c010888888800c52615335738920147546865207472616e73616374696f6e2076616c696469747920757070657220626f756e64206d757374206e6f74206578636565642074686520646561646c696e65566f74696e67001615335738920147546865207472616e73616374696f6e2076616c696469747920757070657220626f756e64206d757374206e6f74206578636565642074686520646561646c696e65566f74696e670016533357346466e3c004034c008888888801852615335738920137547265617375727920646174756d2073686f756c64206d6174636820766f74696e6720696e70757473206f6e20646973707574652069640016533357346466e3c004034c004888888801c52615335738920138547265617375727920646174756d2073686f756c64206d6174636820766f74696e6720696e70757473206f6e206865616420706f6c6963790016333303830012200103420012533573892123547265617375727920646174756d2073686f756c6420626520756e7265736f6c76656400163233001200115335738921215472656173757279207265666572656e63652073686f756c642070726573656e740016330403018222222222222222200f23333303c33303b3300122001222200300b223371e00400260749310008a99ab9c4901215472656173757279207265666572656e63652073686f756c642070726573656e7400162230022253335734a666ae68cdc799199b8c4800000400d2008303d4984cdc3800a400429404c12400c5280a4ca666ae68c10ccc114c05c888888888888888804094ccd5cd2999ab9a533357346604e60024400401e29405288a999ab9a3302730012200200d14a02944528099812998009100091110018050a50149854cd5ce24811b4e6f206f7468657220696e707574732061726520616c6c6f776564001653335734a666ae68cdc41801111100218009111002099b87300122220043002222200314a02930a99ab9c4912f4b657920616e64206c696e6b206669656c647320696e20766f74696e6720696e70757473206d757374206d6174636800163303400904a3303300a04953335734a666ae68cdc7802801099b8f00400114a02930a99ab9c49129566f74696e6720696e70757473206d757374206d61746368206f6e20766f74696e6720746f6b656e730016300222001300122002330343006222200322233222330010030020030023002220013001220023303130032222003222332223300100300200300230042222001300322220023002222200330012222004333004133222330010030023322233001003002300222002300222001332223300100300230012200230012200113322233001003002332223300100300230012200230012200133222330010030023002220023002220012230022230032233332222233330010050040030020040030020013333035300722222222222222220102533357346603266002440024444008660044400244440082a666ae68cc05cc0048800801c5280a5114a02a66ae7124127436f6e74696e75696e6720616e642072656d6f76656420696e70757473206e6f7420666f756e640016223200353335734606a0022930a99ab9c4912645786163746c792074776f20766f74696e6720696e7075747320617265206578706563746564001630163302e3006222222222222222201023301630012200200633573892010554616c6c79004984c8c8c8c8c8c8c8c94ccd5cd1919b8f00100530022222222006149854cd5ce2493d547265617375727920646174756d2073686f756c64206d6174636820766f746520646174756d206f6e2028686561644d702c20646973707574654964290016533357346466e3c004014c004888888801c5261533573892013d547265617375727920646174756d2073686f756c64206d6174636820766f746520646174756d206f6e2028686561644d702c20646973707574654964290016333302930012200102520012533573892129547265617375727920696e70757420646174756d2073686f756c6420626520756e7265736f6c766564001632330012001153357389212d5472656173757279207468617420686f6c6473206865616420626561636f6e206d757374206265207370656e740016330313009222222222222222201023333302d33302c33001220012222003003223371e00400260569310008a502230022253335734a666ae68cdc799199b8c4800000400d2008302e4984cdc3800a400429404c0e800c52818011100098009100119815198009100091110019111991119800801801001801180a998169802911111111111111100811980a98009100100299ab9c491075265736f6c766500498cc0148c0e400454cd5ce2491c566f746520646174756d2073686f756c642062652070726573656e740016335738920111446973707574655265736f6c7574696f6e0049888cc00840048cc008400c94ccd5cd19b883001220013002220011004100322333003223370000400200400244464646600e004460024466444660020060040046601400246002446644466002006004004600e002466600246600c002900011980324000002446600e0040026600800400244646600800246002446660024664446600200600400666010002460024466444660020060040046444460060080024664446600200600400666010002460024466444660020060040046444460040080024466444660020060040086660140040024466e3c008004ccc01000800488cdc78010009119118008011980498011000800911191919191911800801198040018009980600091800911991119800801801001191111801002000998159802100091800912999ab9a3300a3008200123300730012200200314a02944c004c0108004c15088cc004489400888c00888c8c8cc8888cc00401000ccc888cc00400c008010004c020014cc0048cc88888cc00401401000c0044c8888c00c010008ccc08c02000801cc140888cc008400488cc8888cc00401000c008cc01400400c88c94ccd5cd18100008a5014a2660400040024444a666ae68c8c8cdc38010009808980110009808180110008998029801100091800911999980f0020010039198038010008a5014a0609a444660042944894ccd5cd18018010998028008018a50223233301c330040012300122002002223371e00400266600440022a66ae7124010f556e6578706563746564206361736500162200122333023002225002223322223300100400330030020012253335734660406004440046002440042646466e1c008004c00888004c0088800452811980090008a99ab9c491084e6f6e652e6765740016223002223003225333573466012008004266601000e006002294088cc0088cc0088cc0180080048892811119802125022253335734a666ae68cdc3803001899b8700500214a0266e1c010004528111198011198011198028010008a5013300124a0294488cc0088cc0088c8c8cdc78010009801100098011000925023300224a0466e3c0080048888c8cc004528111801112999ab9a302000315333573466e3c0080204ccc0048004528111801112999ab9a533357346048006266e3c00802c528099b8700100a14a0294052819980210008a99ab9c4910f556e65787065637465642063617365001622001304322223300312250022233004122500222332222330010040033300500400233300800300100523330020014800088cdc000124004608244446600620044466600c002660060080040064600244444466e9520003357406ea0018cd5d0180400299aba0375000866ae80dd400199aba0375000466ae80dd48009bb14988ccc0044cdd2a40006ec52613374a90011bb14984cdd2a40086ec52623232325333573466e1c00920001322230020033007357420022a666ae68cdc380124004264446002006600a6ae8400454cd5ce24810b496e76616c696420746167001635573c0046aae74004dd500091919999111119998008028020018011bae357420026eb8d5d09aba200133300375aeb4d5d09aba2357440026eb8d5d09aba2357446ae88004d55cf1baa00122232332223300100300230043574200260066ae84d5d10009aab9e3754002464666666644444444666666600201000e00c00a0080060046eb8d5d08009bae357426ae88004cc0f1d71aba1357446ae88004dd69aba1357446ae88d5d10009bad357426ae88d5d11aba2357440026eb4d5d09aba2357446ae88d5d11aba2001375c6ae84d5d11aba2357446ae88d5d11aba200135573c6ea800488c8c008004cccc008888800854cd5ce24810f556e6578706563746564206361736500162533573892010f556e657870656374656420636173650016200124890401349900002322300100222500222232300130042001303a2233001122500122300222533357346600e0040102644460040060022600c006446600440022002464660022a66ae712412b6f6e6c794e6f6e416461546f6b656e3a206e6f206e6f6e2d6164612061737365747320696e2076616c7565001622300222323330022001153357389201206f6e6c794e6f6e416461546f6b656e3a206d616c666f726d65642076616c75650016223002223233322223330010040030020080030025333573460260062930a99ab9c4912f6f6e6c794e6f6e416461546f6b656e3a20666f756e64206d6f7265207468616e206f6e6520746f6b656e206e616d65001653335734601c0062930a99ab9c4901346f6e6c794e6f6e416461546f6b656e3a20666f756e64206d6f7265207468616e206f6e652063757272656e63792073796d626f6c001633300120011533573892010f556e657870656374656420636173650016220012232323371e004002600440026004400244464a666ae68c0140045280a513300500323300200100323300124a02944c0c4888cc0084894004894ccd5cd18018010991118010018010998028008019119801118010008a51223300213300114a249408cc00c528119802801000912999ab9a3371e600444004600244004266e1cc00888004c004880045281198008a51224a044646466e3c008004c0088004c008800488ccc00c008894008894ccd5cd1801801099911119800802001801000880098151111198018801111980180119980300080200191919192999ab9a3370e0049000099111180180218031aba100115333573466e1c009200213222230020043005357420022a666ae68cdc3801240082444a0022a66ae7124010b496e76616c696420746167001635573c0046aae74004dd500091919192999ab9a3370e004900009128010a999ab9a3370e004900109128008a99ab9c49010b496e76616c696420746167001635573c0046aae74004dd5000919199111980080180118019aba10013302875c6ae84d5d10009aab9e3754002464666666444444466666600200e00c00a0080060046eb4d5d080098019aba1357440026eb4d5d09aba2357440026eb4d5d09aba2357446ae88004dd69aba1357446ae88d5d11aba2001375c6ae84d5d11aba2357446ae88d5d10009aab9e37540024646464a666ae68cdc3801240002444a0062a666ae68cdc3801240042444a0042a666ae68cdc3801240082444a0022a66ae712410b496e76616c696420746167001635573c0046aae74004dd500091919999111119998008028020018011bad357420026eb4d5d09aba200133020022357426ae88d5d100098019aba1357446ae88d5d10009aab9e37540024646464a666ae68cdc380124000244a0042a666ae68cdc380124004264446002006600a6ae8400454cd5ce2490b496e76616c696420746167001635573c0046aae74004dd500091919911198008018011bae357420026eb4d5d09aba200135573c6ea80048894cd5ce24914456d7074792056616c696461746f722e6d696e7400162323332222333001004003002300435742002602e6ae84d5d100098019aba1357446ae88004d55cf1baa00123232325333573466e1c00920001322222223006007375c6ae8400454ccd5cd19b87002480084cc88888888cc01402001cc080d5d08009980e80c1aba1357440022a666ae68cdc380124008264444444600800e603c6ae8400454ccd5cd19b87002480184cc88888888cc00c02001cdd69aba10013012357426ae8800454ccd5cd19b87002480204c8888888c00801cc034d5d08008a999ab9a3370e004900509991111111198008040039bad3574200260106ae84d5d10008a99ab9c49010b496e76616c696420746167001635573c0046aae74004dd500091919999999999999999111111111111111119999999999999998008088080078070068060058050048040038030028020018011980f8091aba10013301f012357426ae88004cc07c04cd5d09aba2357440026eb4d5d09aba2357446ae88004ccc059d71980b3ae75a6ae84d5d11aba2357446ae88004cc07c03cd5d09aba2357446ae88d5d11aba200133301601b75a6ae84d5d11aba2357446ae88d5d11aba2001300b357426ae88d5d11aba2357446ae88d5d11aba20013301f01c357426ae88d5d11aba2357446ae88d5d11aba23574400266602c00802a6ae84d5d11aba2357446ae88d5d11aba2357446ae88d5d100099980b3ae015357426ae88d5d11aba2357446ae88d5d11aba2357446ae88d5d1000980f1aba1357446ae88d5d11aba2357446ae88d5d11aba2357446ae88d5d100099980b0051980b0048019aba1357446ae88d5d11aba2357446ae88d5d11aba2357446ae88d5d11aba20013301f005357426ae88d5d11aba2357446ae88d5d11aba2357446ae88d5d11aba2357446ae88004cc069d69aba1357446ae88d5d11aba2357446ae88d5d11aba2357446ae88d5d11aba2357446ae88004cc069d69aba1357446ae88d5d11aba2357446ae88d5d11aba2357446ae88d5d11aba2357446ae88d5d10009aab9e37540024646464a666ae68cdc3801240002444a0062a666ae68cdc3801240042444a0042a666ae68cdc3801240082444a0022a66ae712410b496e76616c696420746167001635573c0046aae74004dd500091919192999ab9a3370e004900009911111118030039bae357420022a666ae68cdc380124004264444444600a00e603a6ae8400454ccd5cd19b87002480104c8888888c01001cc06cd5d08008a999ab9a3370e004900309991111111198018040039bad35742002601e6ae84d5d10008a999ab9a3370e0049004099111111180100398051aba100115333573466e1c009200a1332222222233001008007375a6ae84004c014d5d09aba2001153357389210b496e76616c696420746167001635573c0046aae74004dd500091919991111998008020018011bad3574200260306ae84d5d100098019aba1357446ae88004d55cf1baa00123232325333573466e1c00920001333222222222233300700a009008330180073574200260266ae84d5d10009980c3ae357426ae88d5d10008a999ab9a3370e0049001099911111111198030048041980c0039aba10013006357426ae8800454ccd5cd19b87002480104cc888888888cc014024020ccc050065d69aba10013301875c6ae84d5d10008a999ab9a3370e0049003099111111118020041980c0039aba100115333573466e1c00920081333322222222222333300300b00a00900833018007357420026603a0326ae84d5d100099980a00cbad357426ae88d5d100098029aba1357446ae88d5d10008a999ab9a3370e0049005099911111111198010048041980c0039aba10013301875c6ae84d5d10008a999ab9a3370e00490060911111128008a99ab9c49010b496e76616c696420746167001635573c0046aae74004dd500091919911198008018011bad357420026eb4d5d09aba200135573c6ea80048c8cc888cc00400c008dd69aba1001375a6ae84d5d10009aab9e37540024646644466002006004602e6ae84004dd69aba1357440026aae78dd500091919192999ab9a3370e00490000991111801802180a9aba100115333573466e1c009200213222230020043015357420022a666ae68cdc3801240082644446002008602c6ae8400454cd5ce2490b496e76616c696420746167001635573c0046aae74004dd5000919199111980080180118019aba10013003357426ae88004d55cf1baa001232332223300100300230043574200260066ae84d5d10009aab9e3754002464a666ae68cdc3800a4000294054ccd5cd19b87001480085288a99ab9c4910d4e6f74206120626f6f6c65616e001635573a6ea80048c8c8c94ccd5cd19b87002480004889400c54ccd5cd19b87002480084c8888c008010dd69aba100115333573466e1c0092004122250011533573892010b496e76616c696420746167001635573c0046aae74004dd500091919192999ab9a3370e004900009991111111111111980580680618081aba10013300f75a6ae84d5d10008a999ab9a3370e004900109991111111111111980500680618081aba10013300f75a6ae84d5d10008a999ab9a3370e004900209991111111111111980480680618081aba10013005357426ae8800454ccd5cd19b87002480184ccc88888888888888ccc020038034030c040d5d080098029aba1357440026eb4d5d09aba2357440022a666ae68cdc38012401026644444444444446600e01a01860206ae84004dd69aba1357440022a666ae68cdc38012401426444444444444600c01860206ae8400454ccd5cd19b87002480304cc8888888888888cc014034030c040d5d08009bad357426ae8800454ccd5cd19b87002480384cc8888888888888cc010034030c044d5d080098089aba1357440022a666ae68cdc38012402026644444444444446600601a01860226ae84004dd69aba1357440022a666ae68cdc38012402426644444444444446600401a01860206ae84004c040d5d09aba200115333573466e1c009201413222222222222300100c3010357420022a66ae7124010b496e76616c696420746167001635573c0046aae74004dd500091919192999ab9a3370e0049000099111180180218081aba100115333573466e1c009200213222230020043005357420022a666ae68cdc380124008266444446600200a00860206ae84004c014d5d09aba20011533573892010b496e76616c696420746167001635573c0046aae74004dd500091919192999ab9a3370e0049000099111180180218071aba100115333573466e1c00920021222500215333573466e1c0092004122250011533573892010b496e76616c696420746167001635573c0046aae74004dd5000919199111980080180118069aba10013003357426ae88004d55cf1baa001232333322222333300100500400300230073574200266600aeb8cc015d73ad357426ae88004c00cd5d09aba23574400266012eb8d5d09aba2357446ae88004d55cf1baa00123232325333573466e1c00920001222500315333573466e1c00920021322223002004375c6ae8400454ccd5cd19b87002480104c8888c004010c014d5d08008a99ab9c49010b496e76616c696420746167001635573c0046aae74004dd5000900091119180298009bab002300d22533357346ae8c00448940084c8cc8888cc00401000ccc888cc00400c008c018d55ce80098029aab9e0013003357440046ae840048c88c0040080048c8cc888cc00400c008c014d5d0800998020019aba1357440026aae78dd500091919192999ab9a3370e004900009911180100198031aba100115333573466e1c0092002133322222333001005004003375a6ae84004dd69aba1357440026eb4d5d09aba2357440022a66ae7124010b496e76616c696420746167001635573c0046aae74004dd500091192999ab9a3370e6aae7400520001322230020033003357426aae780044894004dd500091919192999ab9a3370e004900009911180100198029aba100115333573466e1c0092002132223001003375c6ae8400454cd5ce24810b496e76616c696420746167001635573c0046aae74004dd5000919118008011bae00123233222330010030023003357420026eb4d5d09aba200135573c6ea80048c88c004008dd7000911918009bac002300322533357346ae8c00448940084cc8888cc00401000cc010d5d080098011aba200123230022330020020012300223300200200101',
        ]),
    },
    true,
    null,
]
 */
